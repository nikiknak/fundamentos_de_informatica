#las secuencias de escape m√°s frecuentes:

#\n	salto de l√≠nea
#\t	Tab o cambio de pesta√±a
#\s	espacio
#'	Comillas simples
#"	Comillas dobles

#Para pensar: ¬øQu√© usos crees que podemos darle a las expresiones regulares? 
#Propon√© una aplicaci√≥n concreta para tu carrera/disciplina.

#utilizada para describir o encontrar patrones dentro de otros strings
#Se utilizan principalmente para la b√∫squeda de patrones de cadenas de caracteres u operaciones de sustituciones.
#Las expresiones regulares son patrones utilizados para encontrar una determinada combinaci√≥n de caracteres dentro de una cadena de texto.

#Existen lo que se conoce como metacaracteres delimitadores:
#Metacaracter	Significado
#^	Inicio de l√≠nea
#$	Fin de linea
#\A	Inicio de texto
#\Z	Fin de texto
#.	Coincide con cualquier caracter en una l√≠nea dada

#Para pensar ü§î: Dado el siguiente texto:

texto = 'Esta es la linea uno\npalabra en la linea dos\n'
print(texto)
#Esta es la linea uno
#palabra en la linea dos

#¬øC√≥mo crees que dar√°n las siguientes b√∫squedas?

#expresion regular a: '^palabra' --> true (inicio de linea)

#expresion regular b: '\Apalabra' --> false (inicio de texto)
 
#expresion regular c: 'palabra$' --> false (fin de linea)

#expresion regular d: 'palabra\Z' --> false (fin de)


#metacaracteres cuantificadores:

#Metacaracter	Significado
#*	Cero o m√°s: todas las ocurrencias de un dado substring
#+	Una o m√°s ocurrencias del patr√≥n
#?	Cero o una
#{n}	Exactamente n veces
#{n,m}	Por lo menos n pero no m√°s de m veces.


#Para pensar ü§î: ¬øQu√© significar√° la expresi√≥n regular "X(.*)Y"? Ennumera algunas de las posibles strings que cumplen con dicha condici√≥n.
# algo que empiece con X mayuscula y termine Y mayuscula.
#Obtengo lo que se emcuentra entre esas dos letras mas esas letras incluidas.

# Desaf√≠o I: ¬øConstru√≠ la expresi√≥n regular que obtenga al menos 4 d√≠gitos?

# Desaf√≠o II: ¬øConstru√≠ la expresi√≥n regular que obtenga al entre 3 y 6 letras min√∫sculas?

# Desaf√≠o III: ¬øConstru√≠ la expresi√≥n regular que obtenga todas las apariciones del patr√≥n ab en un string?

#Desafio I: \d{4,}

#Desafio II: [a-z]{3,6}

#Desafio III: ab*

#Para pensar ü§î: ¬øExiste una √∫nica respuesta para los ejercicios? 
#¬øQu√© otras alternativas se te ocurren?
# hay varias alternativas
# ejemplo: Xhola123Y

#Los d√≠gitos entre llaves de la forma {n,m}, especifican el m√≠nimo n√∫mero de ocurrencias en n y el m√°ximo en m.

#Existen tambien metacaracteres predefinidos, que nos facilitan el uso de las expresiones regulares:

#Metacaracter	Significado
#\w	Caracter alfanum√©rcio
#\W	Caracter NO alfanum√©rcio
#\d	Caracter num√©rcio
#\D	Caracter NO num√©rcio
#\s	Un espacio, de cualquier tipo (\t\n\r\f)
#\S	Cualquier caracter que no sea un espacio

#Desafio IV: ¬øQu√© expresi√≥n regular usar√≠as para extraer el n√∫mero de estudiantes que hay en una clase seg√∫n el siguiente texto:
texto = 'En la clase de Introducci√≥n a la programaci√≥n hay 30 estudiantes'
print(texto)
#Desaf√≠o IV: /d+


#Rangos

#Un rango es una clase de caracteres abreviada que se crea escribiendo el primer caracter del rango, un gui√≥n y el √∫ltimo caracter del rango. Sirve para listar un conjunto de caracteres de inter√©s, de este modo se encontrar√° uno cualquiera de los caracteres de la lista. Por ejemplo:

#- El rango [a-d] equivale al [abcd]
#- El rango [1-10] equivale al substring [12345678910]
#- El rango [Dd] equivale a buscar una D may√∫scula y una d min√∫scula

#Para trabajar con expresiones regulares en Python, es necesaria la librer√≠a RE, que puede ser instalada usando el instalador de Python (PIP):
#pip install re
import re
texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
patron = "amet"
print(re.search(patron, texto))
#<re.Match object; span=(22, 26), match='amet'>
#span me dice donde esta el substring en todo el texto.
#Si ponemos texto[22:26] nos devuelve amet

# veamos qu√© hace match():

texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
patron = "amet"
print(re.match(patron, texto))
#none
#¬øQu√© resultado obtenemos con search()?¬øQu√© diferencias observan con match()?
# La funci√≥n match() 
#devuelve la primera aparicion y solo al principio de la cadena.
#Si se encuentra  en la primera linea --> devuelve la coincidencia
#si es otra linea --> devuelve Nulo 
# La funcion search()
#nos indica si hizo match, en que posicion se encuentra.

#Comentarios
#El funci√≥n match() de re busca el patr√≥n y devuelve la primera aparici√≥n y solo al principio de la cadena.
#Si se encuentra una coincidencia en la primera l√≠nea, devuelve el objeto de coincidencia.
#Pero, si se encuentra una coincidencia en alguna otra l√≠nea, devulve un valor nulo.

texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
patron = "amet"
print(re.search(patron, texto).group())
#¬øQu√© resultado obtenemos? ¬øPara qu√© sirve la funci√≥n group()?
#group() ‚Üí para  obtener el string de ese search , convertir el objeto a un string.

print(re.findall(patron, texto))
#¬øQu√© resultado obtenemos?
#['amet', 'amet'] --> devuelve todas las coincidencias en formato lista.

texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
patron = "amet"
print(re.search(patron, texto).group())
#amet
print(re.search(patron, texto).group(0))
#amet

#El m√©todo group() (o group(0)) nos devuelve la coincidencia.
#Sin embargo si lo que se quiere no es encontrar un patr√≥n en particular,
#sino obtener lo que est√° dentro de cierto patr√≥n (por ejemplo lo que hay entre ciertas palabras) hay que modificar el patr√≥n.
# Vamos a ver el siguiente ejemplo:

import re
texto = "Lorem ipsum dolor sit amet, consectetur ipsum elit. Amet sit amet."
patron = "ipsum(.*)sit"
print(re.search(patron, texto).group())
#'ipsum dolor sit amet, consectetur ipsum elit. Amet sit'
print(re.search(patron, texto).group(0))
#'ipsum dolor sit amet, consectetur ipsum elit. Amet sit'
print(re.search(patron, texto).group(1)) # --> ‚Üí si nos queremos quedar con el substring contenido entre ipsum y sit , sin ipsum y sin sit
#' dolor sit amet, consectetur ipsum elit. Amet '

#Ac√° se utilizaron algunos metacaracteres, como lo son el punto (.)
#para indicar que puede ser cualquier car√°cter, y el aster√≠sco (*) para indicar que puede haber 0 o m√°s de estos caracteres.
#De esta manera obtenemos como resultado lo que se encuentre entre las palabras "ipsum" y "sit",
#sin embargo observen dos cosas.
#Primero, el string que nos devuelve tiene dentro un substring que deber√≠a haber sido encontrado en la b√∫squeda: "ipsum dolor sit",
#pero que sin embargo no aparece.
#Segundo, nuevamente al hacer group() o group(0) obtenemos la coincidencia,
#pero si nos queremos quedar con el substring que est√° contenido entre estas palabras debemos utilizar group(1).
#Ahora bien, como vimos, usar el patr√≥n de b√∫squeda de esta manera prioriza los matches externos, es decir, busca el primer delimitador ("ipsum" en nuestro caso) y luego abarca todo hasta la √∫ltima aparici√≥n del segundo delimitador ("sit").
#Existe una forma de priorizar los matches internos y es con el metacar√°cter ?:


texto = "Lorem ipsum dolor sit amet, consectetur ipsum elit. Amet sit amet."
patron = "ipsum(.*?)sit"
print(re.search(patron, texto).group())
#'ipsum dolor sit'
print(re.search(patron, texto).group(0))
#'ipsum dolor sit'
print(re.search(patron, texto).group(1))
#' dolor '

#Cuando se quieren obtener todas las apariciones del patr√≥n se utiliza el m√©todo findall el cual act√∫a para cada coincidencia como si devolviera el group(1),
# es decir devuelve en una lista la parte que se encuentra dentro de los delimitadores.


texto = "Lorem ipsum dolor sit amet, consectetur ipsum elit. Amet sit amet."
patron = "ipsum(.*?)sit"
print(re.findall(patron, texto))
#[' dolor ', ' elit. Amet ']


#Ejecutemos ahora la siguiente l√≠nea:

print(re.sub(patron, "###", texto))
# Lorem ### amet, consectetur ### amet.
#Para pensar ü§î: ¬øQu√© resultado obtenemos? ¬øPara qu√© sirve la funci√≥n sub?
#La funci√≥n sub permite reemplazar todos las ocurrencias del patr√≥n por otro patr√≥n en un String.