Pandas.read_csv --> lee un archivo de tipo tabla separado en tabla

sep: indica como separar los eleementos. por defecto es la coma ","

header: toma la primera fila como encabezado de la tabla ( si no se le pasa una lista de encabezados)
Se puede seleccionar cualquier fila como encabezado. Si no tiene encabezado y no se queire usar ninguna de los datos se utiliza None.

dtype: Indica el tipo de datos del data frame. Por defecto detecta el tipo de datos por columna.

skiprows: ignora un numero de filas. Por defecto es 0.

nrows: cantidad de lineas que se leen del archivo. Sirve cuando el archivo es muy grande.

df.head: muestra un numero dado de la parte inicial del data frame. Por defecto su valor es 5.

df.tail: de igual manera, muestra un numero dado del final del data frame. por defecto su valor e 5.

df.max(): nos dice el valor maximo por columna.
df.min(): idem al anterior pero con el valor minimo por columna.

df.count(): devuelve la cantidad de datos no nulos de cada columna.

UNIONES:
concat: (une dos datos de pandas)

df1 = pd.DataFrame({"A": ["A0", "A1", "A2", "A3"], "B": ["B0", "B1",
"B2", "B3"], "C": ["C0", "C1", "C2", "C3"], "D": ["D0", "D1", "D2",
"D3"]}, index=[0, 1, 2, 3])

df2 = pd.DataFrame({"B": ["B2", "B3", "B6", "B7"], "D": ["D2", "D3",
"D6", "D7"], "F": ["F2", "F3", "F6", "F7"]}, index=[2, 3, 6, 7])

>>> print(df1)
  A  B  C  D
0 A0 B0 C0 D0
1 A1 B1 C1 D1
2 A2 B2 C2 D2
3 A3 B3 C3 D3

>>> print(df2)
   B  D  F
2 B2 D2 F2
3 B3 D3 F3
6 B6 D6 F6
7 B7 D7 F7

>>> result = pd.concat([df1, df2])
>>> print(result)
Por defecto este método usa el eje de las columnas para unir los datos (axis=0) y
une los data frames de manera que quede uno abajo de otro y, a su vez, uniendo
las columnas (se agregan las nuevas):
  A  B  C  D  F
0 A0 B0 C0 D0 NaN
1 A1 B1 C1 D1 NaN
2 A2 B2 C2 D2 NaN
3 A3 B3 C3 D3 NaN
2 NaN B2 NaN D2 F2
3 NaN B3 NaN D3 F3
6 NaN B6 NaN D6 F6
7 NaN B7 NaN D7 F7

usar las filas para que se unan los data frames:
>>> result = pd.concat([df1, df2], axis=1)
>>> print(result)
  A  B  C  D  B   D   F
0 A0 B0 C0 D0 NaN NaN NaN
1 A1 B1 C1 D1 NaN NaN NaN
2 A2 B2 C2 D2 B2 D2 F2
3 A3 B3 C3 D3 B3 D3 F3
6 NaN NaN NaN NaN B6 D6 F6
7 NaN NaN NaN NaN B7 D7 F7


INTERSECCION:
# me devuelve las columnas que tengan en comun

>>> result = pd.concat([df1, df2], join=”inner”) eje de columnas
>>> print(result)
  B  D
0 B0 D0
1 B1 D1
2 B2 D2
3 B3 D3
2 B2 D2
3 B3 D3
6 B6 D6
7 B7 D7

para hacerlo con el eje de las filas:
>>> result = pd.concat([df1, df2], axis=1, join=”inner”)
>>> print(result)
  A  B  C  D  B  D  F
2 A2 B2 C2 D2 B2 D2 F2
3 A3 B3 C3 D3 B3 D3 F3

otra manera de UNIR:
pandas.append(): 
>>> result = df1.append(df2) POR COLUMNAS
>>> print(result)
  A  B  C  D  F
0 A0 B0 C0 D0 NaN
1 A1 B1 C1 D1 NaN
2 A2 B2 C2 D2 NaN
3 A3 B3 C3 D3 NaN
2 NaN B2 NaN D2 F2
3 NaN B3 NaN D3 F3
6 NaN B6 NaN D6 F6
7 NaN B7 NaN D7 F7


Si queremos que no se repitan los numeros en el index: 
se utiliza: ignore_index=True, sort=False

>>> result = pd.concat([df1, df2], ignore_index=True, sort=False)
>>> result = df1.append(df2, ignore_index=True, sort=False)
>>> print(result)
  A  B  C  D  F
0 A0 B0 C0 D0 NaN
1 A1 B1 C1 D1 NaN
2 A2 B2 C2 D2 NaN
3 A3 B3 C3 D3 NaN
4 NaN B2 NaN D2 F2
5 NaN B3 NaN D3 F3
6 NaN B6 NaN D6 F6
7 NaN B7 NaN D7 F7

CONECTAR DATA FRAMES CON SERIES:
s1 = pd.Series(["X0", "X1", "X2", "X3"], name="X")
>>> result = pd.concat([df1, s1], axis=1)
>>> print(result)
   A  B  C D  X
0 A0 B0 C0 D0 X0
1 A1 B1 C1 D1 X1
2 A2 B2 C2 D2 X2
3 A3 B3 C3 D3 X3

Recuerden que por defecto el eje que se utiliza es el de las columnas (axis=0)
>>> result = pd.concat([df1, s1], ignore_index=True)
>>> print(result)
 
   A  B   C    D  0
0 A0  B0  C0  D0 NaN
1 A1  B1  C1  D1 NaN
2 A2  B2  C2  D2 NaN
3 A3  B3  C3  D3 NaN
4 NaN NaN NaN NaN X0
5 NaN NaN NaN NaN X1
6 NaN NaN NaN NaN X2
7 NaN NaN NaN NaN X3

Si la serie tiene índices (en las filas) y se agrega usando el eje de las columnas (axis=0),
aunque se repitan los índices, se van a unir por separado:
s2 = pd.Series(["X0", "X1", "X2", "X3"], index=[1, "B", "C", "D"])
>>> result = pd.concat([df1, s2])
>>> print(result)
  A    B   C   D  0
0 A0   B0  C0  D0 NaN
1 A1   B1  C1  D1 NaN
2 A2   B2  C2  D2 NaN
3 A3   B3  C3  D3 NaN
1 NaN  NaN NaN NaN X0
B NaN  NaN NaN NaN X1
C NaN  NaN NaN NaN X2
D NaN  NaN NaN NaN X3

Sin embargo, si se usa el eje de las filas y si comparten algún índice estos se
unen en su correspondiente fila:
>>> result = pd.concat([df1, s2], axis=1)
>>> print(result)
  A   B   C   D   0
0 A0  B0  C0  D0  NaN
1 A1  B1  C1  D1  X0
2 A2  B2  C2  D2  NaN
3 A3  B3  C3  D3  NaN
B NaN NaN NaN NaN X1
C NaN NaN NaN NaN X2
D NaN NaN NaN NaN X3

Si se quiere añadir una serie como una nueva fila, podemos usar append():
>>> result = df1.append(s2, ignore_index=True)
>>> print(result)
  A  B  C  D  1
0 A0 B0 C0 D0 NaN
1 A1 B1 C1 D1 NaN
2 A2 B2 C2 D2 NaN
3 A3 B3 C3 D3 NaN
4 NaN X1 X2 X3 X0

TO_DIC() y TO_LIST():

Los data frames se pueden guardar como diccionarios:
>>> print(df6)
  A B C X Y
0 1 2 3 4 8
1 5 6 7 4 8
>>> print(df6.to_dict())
{'A': {0: 1, 1: 5}, 'B': {0: 2, 1: 6}, 'C': {0: 3, 1: 7}, 'X': {0: 4, 1:
4}, 'Y': {0: 8, 1: 8}}

Las series se pueden guardar tanto en listas como en diccionarios:
>>> print(s2)
1 X0
B X1
C X2
D X3
>>> print(s2.to_list())
['X0', 'X1', 'X2', 'X3']
>>> print(s2.to_dict())
{1: 'X0', 'B': 'X1', 'C': 'X2', 'D': 'X3'}

Si la serie no tiene índices, las claves del diccionario se completan
automáticamente.
>>> print(s1.to_dict())
{0: 'X0', 1: 'X1', 2: 'X2', 3: 'X3'}


MERGE:
pd.merge():

how: indica la manera de unión de los data frames, por defecto es “inner” (intersección).

on: indica en base a qué columna se van a unir los data frames. Esta columna tiene que estar presente en ambos data frames.

left_on: nombre de la columna de los datos de la izquierda el cual se va a usar para unir los data frames.

right_on: igual al anterior, pero con una columna de los datos de la derecha. Ambos tienen que explicitarse.

